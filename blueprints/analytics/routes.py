"""
blueprints/analytics/routes.py

PSU Analytics Dashboard â€” production-ready.
Displays site metrics, Redis summaries, and charts generated by utils.scheduler.
Includes PSU-branded dashboard cards and responsive layout.
"""

import os
import json
from datetime import datetime, timezone
from flask import Blueprint, render_template, jsonify, current_app, send_from_directory
from sqlalchemy import text

analytics_bp = Blueprint("analytics_bp", __name__, url_prefix="/analytics")


# ---------------------------------------------------------
# Helpers
# ---------------------------------------------------------
def get_redis():
    """Try to retrieve global Redis client safely."""
    try:
        app = current_app
        redis_client = (
            app.extensions.get("redis")
            or app.config.get("REDIS_CLIENT")
        )
        return redis_client
    except Exception:
        return None


def get_db():
    """Fetch SQLAlchemy DB object for direct queries."""
    try:
        sa_ext = current_app.extensions.get("sqlalchemy")
        if sa_ext:
            return sa_ext["db"]
    except Exception:
        return None


def safe_int(val, default=0):
    try:
        return int(val)
    except Exception:
        return default


# ---------------------------------------------------------
# Dashboard View
# ---------------------------------------------------------
@analytics_bp.route("/")
def index():
    """Render PSU Analytics Dashboard."""
    app = current_app
    redis_client = get_redis()
    db = get_db()

    metrics = {}
    chart_url = "/static/img/analytics/traffic_latest.png"
    db_status = "Unknown"
    redis_status = "Disconnected"

    try:
        if db:
            db.session.execute(text("SELECT 1"))
            db_status = "Connected"
    except Exception as e:
        db_status = f"Error: {e}"

    try:
        if redis_client and redis_client.ping():
            redis_status = "Connected"
            last_metrics = redis_client.hgetall("psu:metrics:last")
            if last_metrics:
                metrics = {
                    "last_run": last_metrics.get("last_run", "N/A"),
                    "visits": safe_int(last_metrics.get("visits", 0)),
                    "signups": safe_int(last_metrics.get("signups", 0)),
                }
    except Exception as e:
        redis_status = f"Error: {e}"

    # Fallback demo data if Redis empty
    if not metrics:
        metrics = {
            "last_run": datetime.now(timezone.utc).isoformat(),
            "visits": 253,
            "signups": 14,
        }

    # PSU Analytics Card Data
    cards = [
        {
            "title": "Total Visits",
            "value": f"{metrics['visits']:,}",
            "icon": "bi bi-people-fill text-warning",
            "desc": "Sessions in the last 24 hours"
        },
        {
            "title": "New Signups",
            "value": f"{metrics['signups']:,}",
            "icon": "bi bi-person-plus-fill text-success",
            "desc": "New user registrations"
        },
        {
            "title": "Database",
            "value": db_status,
            "icon": "bi bi-hdd-network text-primary",
            "desc": "SQLAlchemy database connection"
        },
        {
            "title": "Redis Cache",
            "value": redis_status,
            "icon": "bi bi-lightning-charge-fill text-danger" if "Error" in redis_status else "bi bi-lightning-charge text-info",
            "desc": "Real-time metrics caching backend"
        },
    ]

    return render_template(
        "analytics/insights_dashboard.html",
        metrics=metrics,
        chart_url=chart_url,
        cards=cards,
        now=datetime.utcnow
    )


# ---------------------------------------------------------
# JSON API: fetch metrics
# ---------------------------------------------------------
@analytics_bp.route("/api/metrics")
def api_metrics():
    """Return latest metrics for live refresh widgets."""
    redis_client = get_redis()
    try:
        if redis_client:
            data = redis_client.hgetall("psu:metrics:last")
            if data:
                return jsonify({
                    "status": "ok",
                    "metrics": data,
                    "updated": datetime.now(timezone.utc).isoformat()
                })
    except Exception as e:
        current_app.logger.warning(f"Redis metrics error: {e}")
    return jsonify({
        "status": "unavailable",
        "metrics": {},
        "updated": datetime.now(timezone.utc).isoformat()
    })


# ---------------------------------------------------------
# Serve Chart Images (cache-busting safe)
# ---------------------------------------------------------
@analytics_bp.route("/charts/<filename>")
def charts(filename):
    """Serve analytics chart PNGs from static folder."""
    try:
        img_dir = os.path.join(current_app.root_path, "static", "img", "analytics")
        return send_from_directory(img_dir, filename)
    except Exception:
        return jsonify({"error": "File not found"}), 404


# ---------------------------------------------------------
# Optional AI Insight Endpoint (demo)
# ---------------------------------------------------------
@analytics_bp.route("/api/ai-insight")
def ai_insight():
    """
    Example AI insight generator.
    Uses OpenAI if key configured to summarize analytics trend.
    """
    import openai
    app = current_app
    openai.api_key = os.getenv("OPENAI_API_KEY")
    redis_client = get_redis()

    visits = 0
    signups = 0
    if redis_client:
        data = redis_client.hgetall("psu:metrics:last")
        visits = safe_int(data.get("visits", 0))
        signups = safe_int(data.get("signups", 0))

    trend_prompt = f"""
    You are PittState-Connect's analytics assistant.
    Today's data shows {visits} visits and {signups} new signups.
    Write a short, uplifting one-sentence insight for PSU's leadership dashboard.
    """

    if not openai.api_key:
        return jsonify({"insight": "AI insights unavailable (missing API key)."}), 200

    try:
        completion = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a helpful, concise analytics assistant."},
                {"role": "user", "content": trend_prompt}
            ],
            max_tokens=60,
        )
        insight = completion.choices[0].message.content.strip()
        return jsonify({"insight": insight})
    except Exception as e:
        app.logger.warning(f"AI Insight generation failed: {e}")
        return jsonify({"insight": "Insight unavailable due to API error."}), 200
